from datetime import datetime
responses = {
    100: 'Continue',
    101: 'Switching Protocols',

    200: 'OK',
    201: 'Created',
    202: 'Accepted',
    203: 'Non-Authoritative Information',
    204: 'No Content',
    205: 'Reset Content',
    206: 'Partial Content',

    300: 'Multiple Choices',
    301: 'Moved Permanently',
    302: 'Found',
    303: 'See Other',
    304: 'Not Modified',
    305: 'Use Proxy',
    306: '(Unused)',
    307: 'Temporary Redirect',

    400: 'Bad Request',
    401: 'Unauthorized',
    402: 'Payment Required',
    403: 'Forbidden',
    404: 'Not Found',
    405: 'Method Not Allowed',
    406: 'Not Acceptable',
    407: 'Proxy Authentication Required',
    408: 'Request Timeout',
    409: 'Conflict',
    410: 'Gone',
    411: 'Length Required',
    412: 'Precondition Failed',
    413: 'Request Entity Too Large',
    414: 'Request-URI Too Long',
    415: 'Unsupported Media Type',
    416: 'Requested Range Not Satisfiable',
    417: 'Expectation Failed',

    500: 'Internal Server Error',
    501: 'Not Implemented',
    502: 'Bad Gateway',
    503: 'Service Unavailable',
    504: 'Gateway Timeout',
    505: 'HTTP Version Not Supported',
}

keys = responses.keys()
keys.sort()
assert keys[0] >= 100 and keys[-1] < 600
tdict = { "Date": str(datetime.today()), "MaxCode" : keys[-1]+1}
initcodes = []
for key in keys:
    initcodes.append('    httpCodeMsg_[%d] = "%s" ;' %(key, responses[key]))
tdict["InitHttpCodeMsg"] = '\n'.join(initcodes)

Code_Template = '''
//class HTTPCode Automatically generated by the python scrip
//Data: ${Date}


class HTTPCode
{
public:
   static const int MAX_CODE = ${MaxCode};
private:
    HTTPCode();
public:
    static const HTTPCode& instance() 
    {
        static HTTPCode _instance;
        return _instance;
    }
    const char* toStr(int code) const ;
private:
    const char* httpCodeMsg_[ MAX_CODE ];
};


HTTPCode::HTTPCode()
{
    for(int i=0; i<MAX_CODE; i++)
    {
        httpCodeMsg_[i] = NULL;
    }
    httpCodeMsg_[0] = "Unknown" ; 
${InitHttpCodeMsg}

}

const char* HTTPCode::toStr(int code) const
{
    if(code >= 0 && code <= MAX_CODE && httpCodeMsg_[ code ])
    {
        return httpCodeMsg_[ code ];
    }
    return httpCodeMsg_[ 0 ];//"Unknown" ; 
}


''' 

#message = "HTTP %d: %s\r\n" % (responses.get(self.status_code) ))

from string import Template
s = Template(Code_Template)
print s.substitute(**tdict)






