/**
 ***All Rights Reserved
 *
 *author zhengyinglin (979762787@qq.com)
 *date 2014-10-27
*/

#ifndef _TORNADO_WEB_H_
#define _TORNADO_WEB_H_
#include <string>
#include <time.h>
#include "boost/function.hpp"
#include "HttpServer.h"


namespace tornado
{
    
//class HTTPCode Automatically generated by the python scrip
//Data: 2014-10-16 15:12:56.474196
class HTTPCode
{
public:
   static const int MAX_CODE = 506;
private:
    HTTPCode();
public:
    static const HTTPCode& instance() 
    {
        static HTTPCode _instance;
        return _instance;
    }
    const char* toStr(int code) const ;
private:
    const char* httpCodeMsg_[ MAX_CODE ];
};


//PPORTED_METHODS = ("GET", "HEAD", "POST", "PATCH", "PUT", "OPTIONS")
class RequestHandler : public boost::enable_shared_from_this<RequestHandler>
{
public:
    RequestHandler();
    virtual ~RequestHandler();

    void setHTTPConnection(const HTTPConnectionPtr&  conn);
    
    virtual void get()
    {
        send_error(405);
    }
    virtual void post()
    {
        send_error(405);
    }

    //克隆自己的一个对象 just new MYSelf
    virtual RequestHandler* clone() = 0;

    void write(const std::string& chunk);
    void write(const char* chunk, size_t len);
    void finish();
    void execute();

    void on_connect_close();

protected:
    const std::string& get_argument(const std::string& name);
    const std::string& get_body_argument(const std::string& name);
    const std::string& get_cookie(const std::string& name);
    inline const std::string& _get_argument(const std::string& name, const std::map<std::string, std::string>& argmap);
    void _log();
    void send_error(int status_code=500);

private:
    void flush();

private:
    bool finished_;
    int status_code_;
    std::string buff_;
    HTTPConnectionPtr  conn_;
};


class ErrorHandler : public RequestHandler
{
public:
    ErrorHandler():
        RequestHandler()
    {
    }

    virtual void get()
    {
        send_error(404);
    }
    virtual void post()
    {
        send_error(404);
    }
    
    virtual RequestHandler* clone()
    {
        return new  ErrorHandler();
    }
};

//暂时不支持正则表达式
class Application
{
public:
    typedef std::map< std::string, RequestHandler* >  HandlerMap;

    Application(const HandlerMap& handlers):
        server_(NULL), 
        handlers_(handlers)
    {
    }

    virtual ~Application()
    {
        delete server_;
        for(auto iter = handlers_.begin(); iter != handlers_.end(); ++iter)
        {
            delete iter->second;
        }
    }

    int listen(const std::string& address, uint32_t port);

    void stop();
    void signal_handler_stop(int32_t fd, uint32_t events);
    
private:
    void handler(HTTPConnectionPtr conn);
    RequestHandler* find_handler(const std::string& path);

private:
   HTTPServer*  server_;
   HandlerMap   handlers_;
};



}//namespace tornado
#endif //_TORNADO_WEB_H_
